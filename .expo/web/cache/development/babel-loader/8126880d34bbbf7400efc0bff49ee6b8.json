{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/akhil/SoftwareApps/Meditate/client/SessionComponents/Timer.jsx\";\nimport React, { useState, useContext } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SessionContext from \"../Contexts.jsx\";\nimport ActionButton from \"./ActionButton.jsx\";\nimport { CountdownCircleTimer } from 'react-native-countdown-circle-timer';\nexport default function Timer() {\n  var _this = this;\n\n  var _useContext = useContext(SessionContext),\n      inSession = _useContext.inSession,\n      setSession = _useContext.setSession,\n      time = _useContext.time;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isPlaying = _useState2[0],\n      setIsPlaying = _useState2[1];\n\n  var timeConvert = function timeConvert(remainingTime) {\n    var minutes = Math.floor(remainingTime / 60);\n    var seconds = remainingTime % 60;\n\n    if (minutes < 10) {\n      minutes = \"0\" + minutes;\n    }\n\n    if (seconds < 10) {\n      seconds = \"0\" + seconds;\n    }\n\n    return minutes + \":\" + seconds;\n  };\n\n  return React.createElement(View, {\n    style: style.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, React.createElement(CountdownCircleTimer, {\n    isPlaying: inSession,\n    duration: 10,\n    colors: [['#A4AA88', 1]],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, function (_ref) {\n    var remainingTime = _ref.remainingTime,\n        animatedColor = _ref.animatedColor;\n    return React.createElement(Animated.Text, {\n      style: style.timerText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }\n    }, timeConvert(remainingTime));\n  }, React.createElement(Text, {\n    style: style.subtext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }, \"remaining\"))), React.createElement(ActionButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }));\n}\n;\nvar style = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    top: '8%',\n    marginBottom: '5%'\n  },\n  timerText: {\n    color: '#787878',\n    fontSize: 40\n  },\n  subtext: {\n    color: '#787878',\n    fontSize: 18,\n    fontWeight: '500'\n  }\n});","map":{"version":3,"sources":["/Users/akhil/SoftwareApps/Meditate/client/SessionComponents/Timer.jsx"],"names":["React","useState","useContext","SessionContext","ActionButton","CountdownCircleTimer","Timer","inSession","setSession","time","isPlaying","setIsPlaying","timeConvert","remainingTime","minutes","Math","floor","seconds","style","container","animatedColor","timerText","subtext","StyleSheet","create","flex","alignItems","justifyContent","top","marginBottom","color","fontSize","fontWeight"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;;;;;AAEA,OAAOC,cAAP;AACA,OAAOC,YAAP;AACA,SAASC,oBAAT,QAAqC,qCAArC;AAEA,eAAe,SAASC,KAAT,GAAiB;AAAA;;AAC9B,oBAAwCJ,UAAU,CAACC,cAAD,CAAlD;AAAA,MAAQI,SAAR,eAAQA,SAAR;AAAA,MAAmBC,UAAnB,eAAmBA,UAAnB;AAAA,MAA+BC,IAA/B,eAA+BA,IAA/B;;AACA,kBAAkCR,QAAQ,CAAC,KAAD,CAA1C;AAAA;AAAA,MAAOS,SAAP;AAAA,MAAkBC,YAAlB;;AAEA,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,aAAD,EAAmB;AACrC,QAAIC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,aAAa,GAAG,EAA3B,CAAd;AACA,QAAII,OAAO,GAAGJ,aAAa,GAAG,EAA9B;;AAEA,QAAIC,OAAO,GAAG,EAAd,EAAkB;AAChBA,MAAAA,OAAO,SAAOA,OAAd;AACD;;AAED,QAAIG,OAAO,GAAG,EAAd,EAAkB;AAChBA,MAAAA,OAAO,SAAOA,OAAd;AACD;;AAED,WAAUH,OAAV,SAAqBG,OAArB;AACD,GAbD;;AAeA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,KAAK,CAACC,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,oBAAD;AACE,IAAA,SAAS,EAAEZ,SADb;AAEE,IAAA,QAAQ,EAAE,EAFZ;AAGE,IAAA,MAAM,EAAE,CAAC,CAAC,SAAD,EAAY,CAAZ,CAAD,CAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAA,QAAGM,aAAH,QAAGA,aAAH;AAAA,QAAkBO,aAAlB,QAAkBA,aAAlB;AAAA,WACC,oBAAC,QAAD,CAAU,IAAV;AAAe,MAAA,KAAK,EAAEF,KAAK,CAACG,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGT,WAAW,CAACC,aAAD,CADd,CADD;AAAA,GADD,EAME,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEK,KAAK,CAACI,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBANF,CALF,CADF,EAeE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfF,CADF;AAwBD;AAAA;AAED,IAAMJ,KAAK,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC9BL,EAAAA,SAAS,EAAE;AACTM,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,UAAU,EAAE,QAFH;AAGTC,IAAAA,cAAc,EAAE,QAHP;AAITC,IAAAA,GAAG,EAAE,IAJI;AAKTC,IAAAA,YAAY,EAAE;AALL,GADmB;AAQ9BR,EAAAA,SAAS,EAAE;AACTS,IAAAA,KAAK,EAAE,SADE;AAETC,IAAAA,QAAQ,EAAE;AAFD,GARmB;AAY9BT,EAAAA,OAAO,EAAE;AACPQ,IAAAA,KAAK,EAAE,SADA;AAEPC,IAAAA,QAAQ,EAAE,EAFH;AAGPC,IAAAA,UAAU,EAAE;AAHL;AAZqB,CAAlB,CAAd","sourcesContent":["import React, { useState, useContext } from 'react';\nimport { StyleSheet, Animated, Text, View } from 'react-native';\nimport SessionContext from '../Contexts.jsx';\nimport ActionButton from './ActionButton.jsx';\nimport { CountdownCircleTimer } from 'react-native-countdown-circle-timer';\n\nexport default function Timer() {\n  const { inSession, setSession, time } = useContext(SessionContext);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  const timeConvert = (remainingTime) => {\n    let minutes = Math.floor(remainingTime / 60);\n    let seconds = remainingTime % 60;\n\n    if (minutes < 10) {\n      minutes = `0${minutes}`;\n    }\n\n    if (seconds < 10) {\n      seconds = `0${seconds}`;\n    }\n\n    return `${minutes}:${seconds}`;\n  }\n\n  return (\n    <View style={style.container}>\n      <CountdownCircleTimer\n        isPlaying={inSession}\n        duration={10}\n        colors={[['#A4AA88', 1]]}\n      >\n        <View>\n        {({ remainingTime, animatedColor }) => (\n          <Animated.Text style={style.timerText}>\n            {timeConvert(remainingTime)}\n          </Animated.Text>\n        )}\n          <Text style={style.subtext}>remaining</Text>\n        </View>\n      </CountdownCircleTimer>\n      <ActionButton />\n    </View>\n\n    // <View style={style.timer}>\n    //   <Text style={style.timerText}>{minutes}:{secs}</Text>\n    //   <Text style={style.subtext}>minutes</Text>\n    // </View>\n  )\n};\n\nconst style = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    top: '8%',\n    marginBottom: '5%'\n  },\n  timerText: {\n    color: '#787878',\n    fontSize: 40,\n  },\n  subtext: {\n    color: '#787878',\n    fontSize: 18,\n    fontWeight: '500',\n  }\n})\n\n"]},"metadata":{},"sourceType":"module"}