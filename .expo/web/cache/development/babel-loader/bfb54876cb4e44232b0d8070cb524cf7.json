{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/akhil/SoftwareApps/Meditate/client/SessionComponents/Timer.jsx\";\nimport React, { useState, useContext } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SessionContext from \"../Contexts.jsx\";\nimport ActionButton from \"./ActionButton.jsx\";\nimport { CountdownCircleTimer } from 'react-native-countdown-circle-timer';\nexport default function Timer() {\n  var _this = this;\n\n  var _useContext = useContext(SessionContext),\n      inMeditation = _useContext.inMeditation,\n      setInMeditation = _useContext.setInMeditation,\n      time = _useContext.time,\n      inSession = _useContext.inSession,\n      setInSession = _useContext.setInSession,\n      sessionFinished = _useContext.sessionFinished,\n      setSessionFinished = _useContext.setSessionFinished;\n\n  var _useState = useState(time),\n      _useState2 = _slicedToArray(_useState, 2),\n      timer = _useState2[0],\n      setTimer = _useState2[1];\n\n  var timeConvert = function timeConvert(remainingTime) {\n    var minutes = Math.floor(remainingTime / 60);\n    var seconds = remainingTime % 60;\n\n    if (minutes < 10) {\n      minutes = \"0\" + minutes;\n    }\n\n    if (seconds < 10) {\n      seconds = \"0\" + seconds;\n    }\n\n    return minutes + \":\" + seconds;\n  };\n\n  return React.createElement(Animated.View, {\n    style: inSession ? dynamicStyle('20%').container : dynamicStyle('10%').container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, React.createElement(CountdownCircleTimer, {\n    isPlaying: inMeditation,\n    duration: timer,\n    colors: [['#A4AA88', 1]],\n    size: 300,\n    strokeWidth: 8,\n    onComplete: function onComplete() {\n      setInSession(!inSession);\n      setSessionFinished(!sessionFinished);\n      setTimer(time);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, function (_ref) {\n    var remainingTime = _ref.remainingTime,\n        animatedColor = _ref.animatedColor;\n    return React.createElement(View, {\n      style: style.textContainer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }\n    }, React.createElement(Animated.Text, {\n      style: style.timerText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }\n    }, timeConvert(remainingTime)), React.createElement(Text, {\n      style: style.subtext,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }, inSession ? 'remaining' : 'minutes'));\n  }), React.createElement(ActionButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }));\n}\n;\n\nvar dynamicStyle = function dynamicStyle(pos, opacity) {\n  return StyleSheet.create({\n    container: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center',\n      top: pos,\n      marginBottom: '20%'\n    }\n  });\n};\n\nvar style = StyleSheet.create({\n  textContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  timerText: {\n    color: '#787878',\n    fontSize: 60\n  },\n  subtext: {\n    color: '#787878',\n    fontSize: 18,\n    fontWeight: '500'\n  }\n});","map":{"version":3,"sources":["/Users/akhil/SoftwareApps/Meditate/client/SessionComponents/Timer.jsx"],"names":["React","useState","useContext","SessionContext","ActionButton","CountdownCircleTimer","Timer","inMeditation","setInMeditation","time","inSession","setInSession","sessionFinished","setSessionFinished","timer","setTimer","timeConvert","remainingTime","minutes","Math","floor","seconds","dynamicStyle","container","animatedColor","style","textContainer","timerText","subtext","pos","opacity","StyleSheet","create","flex","alignItems","justifyContent","top","marginBottom","color","fontSize","fontWeight"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport { StyleSheet, Animated, Text, View } from 'react-native';\nimport SessionContext from '../Contexts.jsx';\nimport ActionButton from './ActionButton.jsx';\nimport { CountdownCircleTimer } from 'react-native-countdown-circle-timer';\n\nexport default function Timer() {\n  const {\n    inMeditation, setInMeditation,\n    time,\n    inSession, setInSession,\n    sessionFinished, setSessionFinished,\n  } = useContext(SessionContext);\n\n  const [timer, setTimer] = useState(time);\n\n  const timeConvert = (remainingTime) => {\n    let minutes = Math.floor(remainingTime / 60);\n    let seconds = remainingTime % 60;\n\n    if (minutes < 10) {\n      minutes = `0${minutes}`;\n    }\n\n    if (seconds < 10) {\n      seconds = `0${seconds}`;\n    }\n\n    return `${minutes}:${seconds}`;\n  }\n\n  return (\n    <Animated.View style={\n      inSession ? dynamicStyle('20%').container : dynamicStyle('10%').container\n      }>\n      <CountdownCircleTimer\n        isPlaying={inMeditation}\n        duration={timer}\n        colors={[['#A4AA88', 1]]}\n        size={300}\n        strokeWidth={8}\n        onComplete={() => {\n          setInSession(!inSession)\n          setSessionFinished(!sessionFinished)\n          setTimer(time);\n        }}\n      >\n        {({ remainingTime, animatedColor }) => (\n          <View style={style.textContainer}>\n            <Animated.Text style={style.timerText}>\n              {timeConvert(remainingTime)}\n            </Animated.Text>\n            <Text style={style.subtext}>{inSession ? 'remaining' : 'minutes'}</Text>\n          </View>\n        )}\n      </CountdownCircleTimer>\n        <ActionButton />\n    </Animated.View>\n  )\n};\n\nconst dynamicStyle = (pos, opacity) => StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    top: pos,\n    marginBottom: '20%',\n  },\n})\n\nconst style = StyleSheet.create({\n  textContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  timerText: {\n    color: '#787878',\n    fontSize: 60,\n  },\n  subtext: {\n    color: '#787878',\n    fontSize: 18,\n    fontWeight: '500',\n  }\n})\n\n"]},"metadata":{},"sourceType":"module"}