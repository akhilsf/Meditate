{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { useMemo, useRef, useState } from 'react';\nimport { sin } from \"./AnimatedMath\";\nvar Value = Animated.createAnimatedComponent(Text);\nexport default function Wheel(_ref) {\n  var value = _ref.value,\n      setValue = _ref.setValue,\n      onScroll = _ref.onScroll,\n      values = _ref.values,\n      containerStyle = _ref.containerStyle,\n      textStyle = _ref.textStyle,\n      _ref$itemHeight = _ref.itemHeight,\n      itemHeight = _ref$itemHeight === void 0 ? 15 : _ref$itemHeight,\n      _ref$selectedColor = _ref.selectedColor,\n      selectedColor = _ref$selectedColor === void 0 ? 'black' : _ref$selectedColor,\n      _ref$disabledColor = _ref.disabledColor,\n      disabledColor = _ref$disabledColor === void 0 ? 'gray' : _ref$disabledColor,\n      wheelHeight = _ref.wheelHeight,\n      _ref$displayCount = _ref.displayCount,\n      displayCount = _ref$displayCount === void 0 ? 5 : _ref$displayCount;\n  var translateY = useRef(new Animated.Value(0));\n  var renderCount = displayCount * 2 < values.length ? displayCount * 4 + 1 : displayCount * 2 - 1;\n  var circular = values.length >= displayCount;\n\n  var _useState = useState(typeof (containerStyle === null || containerStyle === void 0 ? void 0 : containerStyle.height) === 'number' ? containerStyle.height : 100),\n      _useState2 = _slicedToArray(_useState, 2),\n      height = _useState2[0],\n      setHeight = _useState2[1];\n\n  var radius = wheelHeight != null ? wheelHeight / 2 : height / 2;\n  var valueIndex = useMemo(function () {\n    return values.indexOf(value);\n  }, [values, value]);\n  var panResponder = React.useMemo(function () {\n    return PanResponder.create({\n      onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder() {\n        return true;\n      },\n      onStartShouldSetPanResponderCapture: function onStartShouldSetPanResponderCapture() {\n        return true;\n      },\n      onPanResponderGrant: function onPanResponderGrant() {\n        translateY.current.setValue(0);\n        onScroll && onScroll(true);\n      },\n      onPanResponderMove: function onPanResponderMove(evt, gestureState) {\n        translateY.current.setValue(gestureState.dy);\n        evt.stopPropagation();\n      },\n      onPanResponderRelease: function onPanResponderRelease(_, gestureState) {\n        onScroll && onScroll(false);\n        translateY.current.extractOffset();\n        var newValueIndex = valueIndex - Math.round(gestureState.dy / (radius * 2 / displayCount));\n        if (circular) newValueIndex = (newValueIndex + values.length) % values.length;else {\n          if (newValueIndex < 0) newValueIndex = 0;else if (newValueIndex >= values.length) newValueIndex = values.length - 1;\n        }\n        var newValue = values[newValueIndex];\n\n        if (newValue === value) {\n          translateY.current.setOffset(0);\n          translateY.current.setValue(0);\n        } else setValue(newValue);\n      }\n    });\n  }, [circular, displayCount, onScroll, radius, setValue, value, valueIndex, values]);\n  var displayValues = useMemo(function () {\n    var centerIndex = Math.floor(renderCount / 2);\n    return new Array(renderCount).fill(undefined).map(function (_, index) {\n      var targetIndex = valueIndex + index - centerIndex;\n\n      if (targetIndex < 0 || targetIndex >= values.length) {\n        if (!circular) {\n          return null;\n        }\n\n        targetIndex = (targetIndex + values.length) % values.length;\n      }\n\n      return values[targetIndex];\n    });\n  }, [renderCount, valueIndex, values, circular]);\n  var animatedAngles = useMemo(function () {\n    translateY.current.setValue(0);\n    translateY.current.setOffset(0);\n    var currentIndex = displayValues.indexOf(value);\n    return displayValues.map(function (_, index) {\n      return translateY.current.interpolate({\n        inputRange: [-radius, radius],\n        outputRange: [-radius + radius * 2 / displayCount * (index - currentIndex), radius + radius * 2 / displayCount * (index - currentIndex)],\n        extrapolate: 'extend'\n      }).interpolate({\n        inputRange: [-radius, radius],\n        outputRange: [-Math.PI / 2, Math.PI / 2],\n        extrapolate: 'clamp'\n      });\n    });\n  }, [displayValues, radius, value, displayCount]);\n  return React.createElement(View, _extends({\n    style: [styles.container, containerStyle],\n    onLayout: function onLayout(evt) {\n      return setHeight(evt.nativeEvent.layout.height);\n    }\n  }, panResponder.panHandlers), displayValues.map(function (displayValue, index) {\n    var animatedAngle = animatedAngles[index];\n    return React.createElement(Value, {\n      style: [textStyle, {\n        position: 'absolute',\n        height: itemHeight,\n        transform: [{\n          translateY: Animated.multiply(radius, sin(animatedAngle))\n        }, {\n          rotateX: animatedAngle.interpolate({\n            inputRange: [-Math.PI / 2, Math.PI / 2],\n            outputRange: ['-90deg', '90deg'],\n            extrapolate: 'clamp'\n          })\n        }],\n        color: displayValue === value ? selectedColor : disabledColor\n      }],\n      key: \"\" + value + (index > displayValues.length / 2 ? 'Post' : 'Before') + (displayValue !== null && displayValue !== void 0 ? displayValue : 'null' + index)\n    }, displayValue);\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    height: '100%',\n    minWidth: 30,\n    overflow: 'hidden',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  contentContainer: {\n    justifyContent: 'space-between',\n    alignItems: 'center'\n  }\n});","map":{"version":3,"sources":["Wheel.tsx"],"names":["Value","Animated","itemHeight","selectedColor","disabledColor","displayCount","translateY","useRef","renderCount","values","circular","useState","containerStyle","radius","wheelHeight","height","valueIndex","useMemo","panResponder","onMoveShouldSetPanResponder","onStartShouldSetPanResponderCapture","onPanResponderGrant","onScroll","onPanResponderMove","gestureState","evt","onPanResponderRelease","newValueIndex","Math","newValue","setValue","displayValues","centerIndex","targetIndex","animatedAngles","currentIndex","inputRange","outputRange","index","extrapolate","styles","setHeight","animatedAngle","position","transform","sin","rotateX","color","displayValue","value","container","minWidth","overflow","alignItems","justifyContent","contentContainer"],"mappings":"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","sourcesContent":["import {\n  Animated,\n  PanResponder,\n  StyleSheet,\n  Text,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport React, { useMemo, useRef, useState } from 'react';\nimport { sin } from './AnimatedMath';\n\nconst Value = Animated.createAnimatedComponent(Text);\n\nexport interface WheelStyleProps {\n  containerStyle?: ViewStyle;\n  itemHeight?: number;\n  itemGap?: number;\n  selectedColor?: string;\n  disabledColor?: string;\n  textStyle?: TextStyle;\n  wheelHeight?: number;\n  displayCount?: number;\n}\n\nexport interface WheelProps<T> extends WheelStyleProps {\n  value: T;\n  setValue: (value: T) => void;\n  values: T[];\n  onScroll?: (scrollState: boolean) => void;\n}\n\nexport default function Wheel<T>({\n  value,\n  setValue,\n  onScroll,\n  values,\n  containerStyle,\n  textStyle,\n  itemHeight = 15,\n  selectedColor = 'black',\n  disabledColor = 'gray',\n  wheelHeight,\n  displayCount = 5,\n}: WheelProps<T>): React.ReactElement {\n  const translateY = useRef(new Animated.Value(0));\n  const renderCount =\n    displayCount * 2 < values.length\n      ? displayCount * 4 + 1\n      : displayCount * 2 - 1;\n  const circular = values.length >= displayCount;\n  const [height, setHeight] = useState(\n    typeof containerStyle?.height === 'number' ? containerStyle.height : 100\n  );\n  const radius = wheelHeight != null ? wheelHeight / 2 : height / 2;\n\n  const valueIndex = useMemo(() => values.indexOf(value), [values, value]);\n\n  const panResponder = React.useMemo(() => {\n    return PanResponder.create({\n      onMoveShouldSetPanResponder: () => true,\n      onStartShouldSetPanResponderCapture: () => true,\n      onPanResponderGrant: () => {\n        translateY.current.setValue(0);\n        onScroll && onScroll(true);\n      },\n      onPanResponderMove: (evt, gestureState) => {\n        translateY.current.setValue(gestureState.dy);\n        evt.stopPropagation();\n      },\n      onPanResponderRelease: (_, gestureState) => {\n        onScroll && onScroll(false);\n        translateY.current.extractOffset();\n        let newValueIndex =\n          valueIndex -\n          Math.round(gestureState.dy / ((radius * 2) / displayCount));\n        if (circular)\n          newValueIndex = (newValueIndex + values.length) % values.length;\n        else {\n          if (newValueIndex < 0) newValueIndex = 0;\n          else if (newValueIndex >= values.length)\n            newValueIndex = values.length - 1;\n        }\n        const newValue = values[newValueIndex];\n        if (newValue === value) {\n          translateY.current.setOffset(0);\n\n          translateY.current.setValue(0);\n        } else setValue(newValue);\n      },\n    });\n  }, [\n    circular,\n    displayCount,\n    onScroll,\n    radius,\n    setValue,\n    value,\n    valueIndex,\n    values,\n  ]);\n\n  const displayValues = useMemo(() => {\n    const centerIndex = Math.floor(renderCount / 2);\n\n    return new Array(renderCount).fill(undefined).map((_, index) => {\n      let targetIndex = valueIndex + index - centerIndex;\n      if (targetIndex < 0 || targetIndex >= values.length) {\n        if (!circular) {\n          return null;\n        }\n        targetIndex = (targetIndex + values.length) % values.length;\n      }\n      return values[targetIndex];\n    });\n  }, [renderCount, valueIndex, values, circular]);\n\n  const animatedAngles = useMemo(() => {\n    translateY.current.setValue(0);\n    translateY.current.setOffset(0);\n    const currentIndex = displayValues.indexOf(value);\n    return displayValues.map((_, index) =>\n      translateY.current\n        .interpolate({\n          inputRange: [-radius, radius],\n          outputRange: [\n            -radius + ((radius * 2) / displayCount) * (index - currentIndex),\n            radius + ((radius * 2) / displayCount) * (index - currentIndex),\n          ],\n          extrapolate: 'extend',\n        })\n        .interpolate({\n          inputRange: [-radius, radius],\n          outputRange: [-Math.PI / 2, Math.PI / 2],\n          extrapolate: 'clamp',\n        })\n    );\n  }, [displayValues, radius, value, displayCount]);\n\n  return (\n    <View\n      style={[styles.container, containerStyle]}\n      onLayout={(evt) => setHeight(evt.nativeEvent.layout.height)}\n      {...panResponder.panHandlers}\n    >\n      {displayValues.map((displayValue: T | null, index: number) => {\n        const animatedAngle = animatedAngles[index];\n        return (\n          <Value\n            style={[\n              textStyle,\n              // eslint-disable-next-line react-native/no-inline-styles\n              {\n                position: 'absolute',\n                height: itemHeight,\n                transform: [\n                  {\n                    translateY: Animated.multiply(radius, sin(animatedAngle)),\n                  },\n                  {\n                    rotateX: animatedAngle.interpolate({\n                      inputRange: [-Math.PI / 2, Math.PI / 2],\n                      outputRange: ['-90deg', '90deg'],\n                      extrapolate: 'clamp',\n                    }),\n                  },\n                ],\n                color: displayValue === value ? selectedColor : disabledColor,\n              },\n            ]}\n            key={`${value}${\n              index > displayValues.length / 2 ? 'Post' : 'Before'\n            }${displayValue ?? 'null' + index}`}\n          >\n            {displayValue}\n          </Value>\n        );\n      })}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    height: '100%',\n    minWidth: 30,\n    overflow: 'hidden',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  contentContainer: {\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}