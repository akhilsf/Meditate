{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/akhil/SoftwareApps/Meditate/client/SessionComponents/ActionButton.jsx\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SessionContext from \"../Contexts.jsx\";\nexport default function ActionButton() {\n  var _useContext = useContext(SessionContext),\n      inMeditation = _useContext.inMeditation,\n      setInMeditation = _useContext.setInMeditation,\n      time = _useContext.time,\n      setTime = _useContext.setTime,\n      inSession = _useContext.inSession,\n      setInSession = _useContext.setInSession,\n      sessionFinished = _useContext.sessionFinished,\n      setSessionFinished = _useContext.setSessionFinished;\n\n  var _useState = useState('#DBE3EC'),\n      _useState2 = _slicedToArray(_useState, 2),\n      buttonStyle = _useState2[0],\n      setButtonStyle = _useState2[1];\n\n  var sessionAction = function sessionAction() {\n    if (!inSession) {\n      setInSession(!inSession);\n      setInMeditation(!inMeditation);\n    } else {\n      setInMeditation(!inMeditation);\n    }\n  };\n\n  return React.createElement(View, {\n    style: style(inMeditation).container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, React.createElement(TouchableOpacity, {\n    style: style(inMeditation).button,\n    onPress: sessionAction,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: style(inMeditation).actionText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, !inSession ? 'START' : inMeditation ? 'PAUSE' : 'RESUME')), React.createElement(Text, {\n    style: style(inMeditation).finishText,\n    onPress: function onPress() {\n      return setSessionFinished(!sessionFinished);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, inSession && !inMeditation ? 'Finish' : null));\n}\n;\n\nvar style = function style(inMeditation) {\n  return StyleSheet.create({\n    container: {\n      flex: 1,\n      marginTop: '10%'\n    },\n    button: {\n      justifyContent: 'center',\n      alignItems: 'center',\n      width: '100%',\n      height: 75,\n      borderWidth: 10,\n      borderRadius: 100,\n      borderColor: inMeditation ? '#ECE4DB' : '#ecdcdb'\n    },\n    actionText: {\n      margin: 10,\n      fontSize: 30,\n      fontWeight: '600',\n      color: '#787878'\n    },\n    finishText: {\n      fontSize: 18,\n      color: '#787878',\n      width: '100%',\n      marginRight: 'auto',\n      marginLeft: 'auto',\n      marginTop: '10%',\n      textDecorationLine: 'underline'\n    }\n  });\n};","map":{"version":3,"sources":["/Users/akhil/SoftwareApps/Meditate/client/SessionComponents/ActionButton.jsx"],"names":["React","useState","useContext","useEffect","SessionContext","ActionButton","inMeditation","setInMeditation","time","setTime","inSession","setInSession","sessionFinished","setSessionFinished","buttonStyle","setButtonStyle","sessionAction","style","container","button","actionText","finishText","StyleSheet","create","flex","marginTop","justifyContent","alignItems","width","height","borderWidth","borderRadius","borderColor","margin","fontSize","fontWeight","color","marginRight","marginLeft","textDecorationLine"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport SessionContext from '../Contexts.jsx';\n\n\nexport default function ActionButton() {\n  const {\n    inMeditation, setInMeditation,\n    time, setTime,\n    inSession, setInSession,\n    sessionFinished, setSessionFinished\n  } = useContext(SessionContext);\n  const [buttonStyle, setButtonStyle] = useState('#DBE3EC');\n\n  const sessionAction = () => {\n    if (!inSession) {\n      setInSession(!inSession);\n      setInMeditation(!inMeditation)\n    } else {\n      setInMeditation(!inMeditation);\n    }\n  };\n\n\n  return (\n    <View style={style(inMeditation).container}>\n      <TouchableOpacity style={style(inMeditation).button} onPress={sessionAction}>\n        <Text style={style(inMeditation).actionText}>\n          {!inSession ? 'START' : inMeditation ? 'PAUSE' : 'RESUME'}\n        </Text>\n      </TouchableOpacity>\n      <Text\n        style={style(inMeditation).finishText}\n        onPress={() => setSessionFinished(!sessionFinished)}\n      >\n          {inSession && !inMeditation ?\n            'Finish' : null\n          }\n        </Text>\n    </View>\n  )\n};\n\nconst style = (inMeditation) => StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: '10%',\n  },\n  button: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    height: 75,\n    borderWidth: 10,\n    borderRadius: 100,\n    borderColor: inMeditation ? '#ECE4DB' : '#ecdcdb',\n  },\n  actionText: {\n    margin: 10,\n    fontSize: 30,\n    fontWeight: '600',\n    color: '#787878',\n  },\n  finishText: {\n    fontSize: 18,\n    color: '#787878',\n    width: '100%',\n    marginRight: 'auto',\n    marginLeft: 'auto',\n    marginTop: '10%',\n    textDecorationLine: 'underline'\n  }\n});\n\n"]},"metadata":{},"sourceType":"module"}