{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/akhil/SoftwareApps/Meditate/client/pages/settings/TimeSelect.jsx\";\n\nimport React, { useState, useMemo } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TimePicker from 'react-native-wheel-time-picker';\nvar MILLISECONDS_PER_MINUTE = 60 * 1000;\nvar MILLISECONDS_PER_HOUR = 60 * 60 * 1000;\nvar MILLISECONDS_PER_DAY = 24 * MILLISECONDS_PER_HOUR;\nexport default (function () {\n  var _useState = useState(Date.now() % MILLISECONDS_PER_DAY),\n      _useState2 = _slicedToArray(_useState, 2),\n      timeValue = _useState2[0],\n      setTimeValue = _useState2[1];\n\n  var _useMemo = useMemo(function () {\n    return [Math.floor(timeValue / MILLISECONDS_PER_HOUR), Math.floor(timeValue % MILLISECONDS_PER_HOUR / MILLISECONDS_PER_MINUTE), Math.floor(timeValue % MILLISECONDS_PER_MINUTE / 1000)];\n  }, [timeValue]),\n      _useMemo2 = _slicedToArray(_useMemo, 2),\n      hour = _useMemo2[0],\n      min = _useMemo2[1];\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, React.createElement(TimePicker, {\n    value: timeValue,\n    wheelProps: {\n      wheelHeight: 70,\n      itemHeight: 15\n    },\n    onChange: function onChange(newValue) {\n      return setTimeValue(newValue);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    style: styles.timeValue,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, \"\" + (hour < 10 ? '0' : '') + hour + \":\" + (min < 10 ? '0' : '') + min));\n});\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  timeValue: {\n    marginVertical: 20\n  }\n});","map":{"version":3,"sources":["/Users/akhil/SoftwareApps/Meditate/client/pages/settings/TimeSelect.jsx"],"names":["React","useState","useMemo","TimePicker","MILLISECONDS_PER_MINUTE","MILLISECONDS_PER_HOUR","MILLISECONDS_PER_DAY","Date","now","timeValue","setTimeValue","Math","floor","hour","min","styles","container","wheelHeight","itemHeight","newValue","StyleSheet","create","flex","alignItems","justifyContent","marginVertical"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,QAAyC,OAAzC;;;;AAEA,OAAOC,UAAP,MAAuB,gCAAvB;AAEA,IAAMC,uBAAuB,GAAG,KAAK,IAArC;AACA,IAAMC,qBAAqB,GAAG,KAAK,EAAL,GAAU,IAAxC;AACA,IAAMC,oBAAoB,GAAG,KAAKD,qBAAlC;AAGA,gBAAe,YAAM;AACnB,kBAAkCJ,QAAQ,CAACM,IAAI,CAACC,GAAL,KAAaF,oBAAd,CAA1C;AAAA;AAAA,MAAOG,SAAP;AAAA,MAAkBC,YAAlB;;AACA,iBAAoBR,OAAO,CAAC,YAAM;AAChC,WAAO,CACLS,IAAI,CAACC,KAAL,CAAWH,SAAS,GAAGJ,qBAAvB,CADK,EAELM,IAAI,CAACC,KAAL,CAAYH,SAAS,GAAGJ,qBAAb,GAAsCD,uBAAjD,CAFK,EAGLO,IAAI,CAACC,KAAL,CAAYH,SAAS,GAAGL,uBAAb,GAAwC,IAAnD,CAHK,CAAP;AAKD,GAN0B,EAMxB,CAACK,SAAD,CANwB,CAA3B;AAAA;AAAA,MAAOI,IAAP;AAAA,MAAaC,GAAb;;AAQA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AACE,IAAA,KAAK,EAAEP,SADT;AAEE,IAAA,UAAU,EAAE;AACVQ,MAAAA,WAAW,EAAE,EADH;AAEVC,MAAAA,UAAU,EAAE;AAFF,KAFd;AAME,IAAA,QAAQ,EAAE,kBAACC,QAAD;AAAA,aAAcT,YAAY,CAACS,QAAD,CAA1B;AAAA,KANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EASE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAIJ,MAAM,CAACN,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACMI,IAAI,GAAG,EAAP,GAAY,GAAZ,GAAkB,EADxB,IAC6BA,IAD7B,UACqCC,GAAG,GAAG,EAAN,GAAW,GAAX,GAAiB,EADtD,IAC2DA,GAD3D,CATF,CADF;AAeD,CAzBD;AA2BA,IAAMC,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC/BL,EAAAA,SAAS,EAAE;AACTM,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,UAAU,EAAE,QAFH;AAGTC,IAAAA,cAAc,EAAE;AAHP,GADoB;AAM/Bf,EAAAA,SAAS,EAAE;AACTgB,IAAAA,cAAc,EAAE;AADP;AANoB,CAAlB,CAAf","sourcesContent":["import React, { useState, useMemo } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport TimePicker from 'react-native-wheel-time-picker';\n\nconst MILLISECONDS_PER_MINUTE = 60 * 1000;\nconst MILLISECONDS_PER_HOUR = 60 * 60 * 1000;\nconst MILLISECONDS_PER_DAY = 24 * MILLISECONDS_PER_HOUR;\n\n\nexport default () => {\n  const [timeValue, setTimeValue] = useState(Date.now() % MILLISECONDS_PER_DAY);\n  const [hour, min] = useMemo(() => {\n    return [\n      Math.floor(timeValue / MILLISECONDS_PER_HOUR),\n      Math.floor((timeValue % MILLISECONDS_PER_HOUR) / MILLISECONDS_PER_MINUTE),\n      Math.floor((timeValue % MILLISECONDS_PER_MINUTE) / 1000),\n    ];\n  }, [timeValue]);\n\n  return (\n    <View style={styles.container}>\n      <TimePicker\n        value={timeValue}\n        wheelProps={{\n          wheelHeight: 70,\n          itemHeight: 15,\n        }}\n        onChange={(newValue) => setTimeValue(newValue)}\n      />\n      <Text style = {styles.timeValue}>\n        {`${hour < 10 ? '0' : ''}${hour}:${min < 10 ? '0' : ''}${min}`}\n      </Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  timeValue: {\n    marginVertical: 20,\n  },\n});"]},"metadata":{},"sourceType":"module"}