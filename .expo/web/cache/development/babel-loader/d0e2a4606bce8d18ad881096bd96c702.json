{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/akhil/SoftwareApps/Meditate/client/SessionComponents/Timer.jsx\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SessionContext from \"../Contexts.jsx\";\nimport ActionButton from \"./ActionButton.jsx\";\nimport { CountdownCircleTimer } from 'react-native-countdown-circle-timer';\nexport default function Timer() {\n  var _this = this;\n\n  var _useContext = useContext(SessionContext),\n      inMeditation = _useContext.inMeditation,\n      setInMeditation = _useContext.setInMeditation,\n      time = _useContext.time,\n      setTime = _useContext.setTime,\n      inSession = _useContext.inSession,\n      setInSession = _useContext.setInSession,\n      sessionFinished = _useContext.sessionFinished,\n      setSessionFinished = _useContext.setSessionFinished;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      key = _useState2[0],\n      setKey = _useState2[1];\n\n  var _useState3 = useState(time),\n      _useState4 = _slicedToArray(_useState3, 2),\n      remainingTime = _useState4[0],\n      setRemainingTime = _useState4[1];\n\n  var timeConvert = function timeConvert(remainingTime) {\n    var minutes = Math.floor(remainingTime / 60);\n    var seconds = remainingTime % 60;\n\n    if (minutes < 10) {\n      minutes = \"0\" + minutes;\n    }\n\n    if (seconds < 10) {\n      seconds = \"0\" + seconds;\n    }\n\n    setRemainingTime(time);\n    return minutes + \":\" + seconds;\n  };\n\n  var resetTimer = function resetTimer() {\n    setKey(key + 1);\n  };\n\n  useEffect(function () {\n    timeConvert(remainingTime);\n  }, [time]);\n  return React.createElement(View, {\n    style: inMeditation ? dynamicStyle('20%').container : inSession ? dynamicStyle('20%').container : dynamicStyle('10%').container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, React.createElement(CountdownCircleTimer, {\n    key: key,\n    isPlaying: inMeditation,\n    duration: time,\n    colors: [['#A4AA88', 1]],\n    size: 300,\n    strokeWidth: 8,\n    onComplete: function onComplete() {\n      setSessionFinished(true);\n      setInMeditation(!inMeditation);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, function (_ref) {\n    var remainingTime = _ref.remainingTime;\n    return React.createElement(View, {\n      style: style.textContainer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    }, React.createElement(Text, {\n      style: style.timerText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    }, timeConvert(remainingTime)), React.createElement(Text, {\n      style: style.subtext,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }, inSession ? 'remaining' : 'minutes'));\n  }), React.createElement(ActionButton, {\n    resetTimer: resetTimer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }));\n}\n;\n\nvar dynamicStyle = function dynamicStyle(pos, opacity) {\n  return StyleSheet.create({\n    container: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center',\n      top: pos,\n      marginBottom: '20%'\n    }\n  });\n};\n\nvar style = StyleSheet.create({\n  textContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  timerText: {\n    color: '#787878',\n    fontSize: 60\n  },\n  subtext: {\n    color: '#787878',\n    fontSize: 18,\n    fontWeight: '500'\n  }\n});","map":{"version":3,"sources":["/Users/akhil/SoftwareApps/Meditate/client/SessionComponents/Timer.jsx"],"names":["React","useState","useContext","useEffect","SessionContext","ActionButton","CountdownCircleTimer","Timer","inMeditation","setInMeditation","time","setTime","inSession","setInSession","sessionFinished","setSessionFinished","key","setKey","remainingTime","setRemainingTime","timeConvert","minutes","Math","floor","seconds","resetTimer","dynamicStyle","container","style","textContainer","timerText","subtext","pos","opacity","StyleSheet","create","flex","alignItems","justifyContent","top","marginBottom","color","fontSize","fontWeight"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport { StyleSheet, Animated, Text, View } from 'react-native';\nimport SessionContext from '../Contexts.jsx';\nimport ActionButton from './ActionButton.jsx';\nimport { CountdownCircleTimer } from 'react-native-countdown-circle-timer';\n\nexport default function Timer() {\n  const {\n    inMeditation, setInMeditation,\n    time, setTime,\n    inSession, setInSession,\n    sessionFinished, setSessionFinished,\n  } = useContext(SessionContext);\n\n  const [key, setKey] = useState(0);\n  const [remainingTime, setRemainingTime] = useState(time);\n\n  const timeConvert = (remainingTime) => {\n    let minutes = Math.floor(remainingTime / 60);\n    let seconds = remainingTime % 60;\n\n    if (minutes < 10) {\n      minutes = `0${minutes}`;\n    }\n\n    if (seconds < 10) {\n      seconds = `0${seconds}`;\n    }\n\n    setRemainingTime(time)\n\n    return `${minutes}:${seconds}`;\n  }\n\n  const resetTimer = () => {\n    setKey(key + 1);\n  }\n\n  useEffect(() => {\n    timeConvert(remainingTime);\n  }, [time]);\n\n  return (\n    <View style={\n      inMeditation ?\n        dynamicStyle('20%').container :\n        inSession ?\n          dynamicStyle('20%').container :\n          dynamicStyle('10%').container\n      }>\n      <CountdownCircleTimer\n        key={key}\n        isPlaying={inMeditation}\n        duration={time}\n        colors={[['#A4AA88', 1]]}\n        size={300}\n        strokeWidth={8}\n        onComplete={() => {\n          setSessionFinished(true);\n          setInMeditation(!inMeditation);\n        }}\n      >\n        {({ remainingTime }) => (\n          <View style={style.textContainer}>\n            <Text style={style.timerText}>\n              {timeConvert(remainingTime)}\n            </Text>\n            <Text style={style.subtext}>{inSession ? 'remaining' : 'minutes'}</Text>\n          </View>\n        )}\n      </CountdownCircleTimer>\n        <ActionButton resetTimer={resetTimer} />\n    </View>\n  )\n};\n\nconst dynamicStyle = (pos, opacity) => StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    top: pos,\n    marginBottom: '20%',\n  },\n})\n\nconst style = StyleSheet.create({\n  textContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  timerText: {\n    color: '#787878',\n    fontSize: 60,\n  },\n  subtext: {\n    color: '#787878',\n    fontSize: 18,\n    fontWeight: '500',\n  }\n})\n\n"]},"metadata":{},"sourceType":"module"}