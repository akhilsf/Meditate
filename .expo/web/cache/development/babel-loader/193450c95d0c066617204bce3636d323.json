{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useCallback, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Wheel from \"./Wheel\";\nvar MILLISECONDS_PER_MINUTE = 60 * 1000;\nvar MILLISECONDS_PER_HOUR = MILLISECONDS_PER_MINUTE * 60;\nvar MILLISECONDS_PER_DAY = MILLISECONDS_PER_HOUR * 24;\nexport var TimeType;\n\n(function (TimeType) {\n  TimeType[\"hours24\"] = \"hours24\";\n  TimeType[\"hours12\"] = \"hours12\";\n  TimeType[\"min\"] = \"min\";\n  TimeType[\"sec\"] = \"sec\";\n  TimeType[\"ampm\"] = \"am/pm\";\n})(TimeType || (TimeType = {}));\n\nvar DEFAULT_TYPE_TYPES = [TimeType.ampm, TimeType.hours12, ':', TimeType.min];\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    minWidth: 100,\n    height: 100,\n    overflow: 'hidden',\n    borderRadius: 4\n  }\n});\n\nfunction createNumberList(num) {\n  return new Array(num).fill(0).map(function (_, index) {\n    return index < 10 ? \"0\" + index : \"\" + index;\n  });\n}\n\nvar TWENTY_FOUR_LIST = createNumberList(24);\nvar TWELVE_LIST = new Array(12).fill(0).map(function (_, index) {\n  return index + 1 < 10 ? \"0\" + (index + 1) : \"\" + (index + 1);\n});\nvar SIXTY_LIST = createNumberList(60);\nexport default function TimePicker(_ref) {\n  var value = _ref.value,\n      onChange = _ref.onChange,\n      onScroll = _ref.onScroll,\n      containerStyle = _ref.containerStyle,\n      textStyle = _ref.textStyle,\n      _ref$wheelProps = _ref.wheelProps,\n      wheelProps = _ref$wheelProps === void 0 ? {} : _ref$wheelProps,\n      _ref$timeFormat = _ref.timeFormat,\n      timeFormat = _ref$timeFormat === void 0 ? DEFAULT_TYPE_TYPES : _ref$timeFormat;\n\n  var _useState = useState((value !== null && value !== void 0 ? value : Date.now()) % MILLISECONDS_PER_DAY),\n      _useState2 = _slicedToArray(_useState, 2),\n      current = _useState2[0],\n      setCurrent = _useState2[1];\n\n  var _useState3 = useState(Math.floor(current / MILLISECONDS_PER_HOUR)),\n      _useState4 = _slicedToArray(_useState3, 2),\n      hour = _useState4[0],\n      setHour = _useState4[1];\n\n  var _useState5 = useState(Math.floor(current / MILLISECONDS_PER_MINUTE) % 60),\n      _useState6 = _slicedToArray(_useState5, 2),\n      minute = _useState6[0],\n      setMinute = _useState6[1];\n\n  var _useState7 = useState(Math.floor(current / 1000) % 60),\n      _useState8 = _slicedToArray(_useState7, 2),\n      second = _useState8[0],\n      setSecond = _useState8[1];\n\n  var changeTimeValue = useCallback(function (type, newValue) {\n    var newHour = hour;\n    var newMinute = minute;\n    var newSecond = second;\n\n    switch (type) {\n      case 'hour':\n        setHour(newValue);\n        newHour = newValue;\n        break;\n\n      case 'minute':\n        setMinute(newValue);\n        newMinute = newValue;\n        break;\n\n      case 'second':\n        setSecond(newValue);\n        newSecond = newValue;\n        break;\n    }\n\n    var newCurrent = newHour * MILLISECONDS_PER_HOUR + newMinute * MILLISECONDS_PER_MINUTE + newSecond * 1000;\n    setCurrent(newCurrent);\n    onChange && onChange(newCurrent);\n  }, [hour, minute, onChange, second]);\n  return React.createElement(View, {\n    style: [styles.container, containerStyle]\n  }, timeFormat.map(function (timeType) {\n    switch (timeType) {\n      case TimeType.ampm:\n        return React.createElement(Wheel, _extends({\n          key: 'am/pm',\n          value: hour >= 12 ? 'PM' : 'AM',\n          values: ['AM', 'PM'],\n          setValue: function setValue(newValue) {\n            changeTimeValue('hour', hour % 12 + (newValue === 'PM' ? 12 : 0));\n          },\n          onScroll: onScroll,\n          textStyle: textStyle\n        }, wheelProps));\n\n      case TimeType.hours24:\n      case TimeType.hours12:\n        var use24HourSystem = timeType === TimeType.hours24;\n        var displayHour = use24HourSystem ? hour : hour % 12;\n        if (!use24HourSystem && displayHour === 0) displayHour = 12;\n        var displayHourValue = displayHour < 10 ? \"0\" + displayHour : \"\" + displayHour;\n        return React.createElement(Wheel, _extends({\n          key: 'hour',\n          value: displayHourValue,\n          values: use24HourSystem ? TWENTY_FOUR_LIST : TWELVE_LIST,\n          setValue: function setValue(newValue) {\n            changeTimeValue('hour', parseInt(newValue) % 12 + (hour >= 12 ? 12 : 0));\n          },\n          onScroll: onScroll,\n          textStyle: textStyle\n        }, wheelProps));\n\n      case TimeType.min:\n        return React.createElement(Wheel, _extends({\n          key: 'min',\n          value: minute < 10 ? \"0\" + minute : \"\" + minute,\n          values: SIXTY_LIST,\n          setValue: function setValue(newValue) {\n            return changeTimeValue('minute', parseInt(newValue));\n          },\n          onScroll: onScroll,\n          textStyle: textStyle\n        }, wheelProps));\n\n      case TimeType.sec:\n        return React.createElement(Wheel, _extends({\n          key: 'sec',\n          value: second < 10 ? \"0\" + second : \"\" + second,\n          values: SIXTY_LIST,\n          setValue: function setValue(newValue) {\n            return changeTimeValue('second', parseInt(newValue));\n          },\n          onScroll: onScroll,\n          textStyle: textStyle\n        }, wheelProps));\n\n      default:\n        return React.createElement(Text, {\n          key: timeType,\n          style: textStyle\n        }, timeType);\n    }\n  }));\n}","map":{"version":3,"sources":["TimePicker.tsx"],"names":["MILLISECONDS_PER_MINUTE","MILLISECONDS_PER_HOUR","MILLISECONDS_PER_DAY","TimeType","DEFAULT_TYPE_TYPES","styles","container","flexDirection","justifyContent","alignItems","minWidth","height","overflow","borderRadius","index","TWENTY_FOUR_LIST","createNumberList","TWELVE_LIST","SIXTY_LIST","wheelProps","timeFormat","useState","value","Date","Math","current","changeTimeValue","useCallback","newHour","newMinute","newSecond","setHour","setMinute","setSecond","newCurrent","setCurrent","onChange","timeType","hour","newValue","textStyle","use24HourSystem","displayHour","displayHourValue","parseInt","minute","second"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react';\n/* eslint-disable radix */\nimport {\n  StyleProp,\n  StyleSheet,\n  Text,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport Wheel, { WheelStyleProps } from './Wheel';\n\nconst MILLISECONDS_PER_MINUTE = 60 * 1000;\nconst MILLISECONDS_PER_HOUR = MILLISECONDS_PER_MINUTE * 60;\nconst MILLISECONDS_PER_DAY = MILLISECONDS_PER_HOUR * 24;\n\nexport enum TimeType {\n  hours24 = 'hours24',\n  hours12 = 'hours12',\n  min = 'min',\n  sec = 'sec',\n  ampm = 'am/pm',\n}\n\nconst DEFAULT_TYPE_TYPES = [TimeType.ampm, TimeType.hours12, ':', TimeType.min];\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    minWidth: 100,\n    height: 100,\n    overflow: 'hidden',\n    borderRadius: 4,\n  },\n});\n\nfunction createNumberList(num: number) {\n  return new Array(num)\n    .fill(0)\n    .map((_, index) => (index < 10 ? `0${index}` : `${index}`));\n}\n\nconst TWENTY_FOUR_LIST = createNumberList(24);\nconst TWELVE_LIST = new Array(12)\n  .fill(0)\n  .map((_, index) => (index + 1 < 10 ? `0${index + 1}` : `${index + 1}`));\nconst SIXTY_LIST = createNumberList(60);\n\ninterface Props {\n  value?: number | null; // milliseconds of date\n  onChange: (value: number) => void;\n  containerStyle?: StyleProp<ViewStyle>;\n  onScroll?: (scrollState: boolean) => void;\n  textStyle?: TextStyle;\n  wheelProps?: WheelStyleProps;\n  timeFormat?: (string | TimeType)[];\n}\n\nexport default function TimePicker({\n  value,\n  onChange,\n  onScroll,\n  containerStyle,\n  textStyle,\n  wheelProps = {},\n  timeFormat = DEFAULT_TYPE_TYPES,\n}: Props): React.ReactElement {\n  const [current, setCurrent] = useState(\n    (value ?? Date.now()) % MILLISECONDS_PER_DAY\n  );\n  const [hour, setHour] = useState(Math.floor(current / MILLISECONDS_PER_HOUR));\n  const [minute, setMinute] = useState(\n    Math.floor(current / MILLISECONDS_PER_MINUTE) % 60\n  );\n  const [second, setSecond] = useState(Math.floor(current / 1000) % 60);\n\n  const changeTimeValue = useCallback(\n    (type: 'hour' | 'minute' | 'second', newValue: number) => {\n      let newHour = hour;\n      let newMinute = minute;\n      let newSecond = second;\n      switch (type) {\n        case 'hour':\n          setHour(newValue);\n          newHour = newValue;\n          break;\n        case 'minute':\n          setMinute(newValue);\n          newMinute = newValue;\n          break;\n        case 'second':\n          setSecond(newValue);\n          newSecond = newValue;\n          break;\n      }\n      const newCurrent =\n        newHour * MILLISECONDS_PER_HOUR +\n        newMinute * MILLISECONDS_PER_MINUTE +\n        newSecond * 1000;\n      setCurrent(newCurrent);\n      onChange && onChange(newCurrent);\n    },\n    [hour, minute, onChange, second]\n  );\n\n  return (\n    <View style={[styles.container, containerStyle]}>\n      {timeFormat.map((timeType) => {\n        switch (timeType) {\n          case TimeType.ampm:\n            return (\n              <Wheel\n                key={'am/pm'}\n                value={hour >= 12 ? 'PM' : 'AM'}\n                values={['AM', 'PM']}\n                setValue={(newValue) => {\n                  changeTimeValue(\n                    'hour',\n                    (hour % 12) + (newValue === 'PM' ? 12 : 0)\n                  );\n                }}\n                onScroll={onScroll}\n                textStyle={textStyle}\n                {...wheelProps}\n              />\n            );\n\n          case TimeType.hours24:\n          // eslint-disable-next-line no-fallthrough\n          case TimeType.hours12:\n            const use24HourSystem = timeType === TimeType.hours24;\n            let displayHour = use24HourSystem ? hour : hour % 12;\n            if (!use24HourSystem && displayHour === 0) displayHour = 12;\n            const displayHourValue =\n              displayHour < 10 ? `0${displayHour}` : `${displayHour}`;\n            return (\n              <Wheel\n                key={'hour'}\n                value={displayHourValue}\n                values={use24HourSystem ? TWENTY_FOUR_LIST : TWELVE_LIST}\n                setValue={(newValue) => {\n                  changeTimeValue(\n                    'hour',\n                    (parseInt(newValue) % 12) + (hour >= 12 ? 12 : 0)\n                  );\n                }}\n                onScroll={onScroll}\n                textStyle={textStyle}\n                {...wheelProps}\n              />\n            );\n          case TimeType.min:\n            return (\n              <Wheel\n                key={'min'}\n                value={minute < 10 ? `0${minute}` : `${minute}`}\n                values={SIXTY_LIST}\n                setValue={(newValue) =>\n                  changeTimeValue('minute', parseInt(newValue))\n                }\n                onScroll={onScroll}\n                textStyle={textStyle}\n                {...wheelProps}\n              />\n            );\n          case TimeType.sec:\n            return (\n              <Wheel\n                key={'sec'}\n                value={second < 10 ? `0${second}` : `${second}`}\n                values={SIXTY_LIST}\n                setValue={(newValue) =>\n                  changeTimeValue('second', parseInt(newValue))\n                }\n                onScroll={onScroll}\n                textStyle={textStyle}\n                {...wheelProps}\n              />\n            );\n          default:\n            return (\n              <Text key={timeType} style={textStyle}>\n                {timeType}\n              </Text>\n            );\n        }\n      })}\n    </View>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}