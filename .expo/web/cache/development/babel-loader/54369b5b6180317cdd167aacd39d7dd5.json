{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/akhil/SoftwareApps/Meditate/client/SessionComponents/ActionButton.jsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SessionContext from \"../Contexts.jsx\";\nimport { Audio } from 'expo-av';\nexport default function ActionButton(_ref) {\n  var resetTimer = _ref.resetTimer;\n\n  var _useContext = useContext(SessionContext),\n      inMeditation = _useContext.inMeditation,\n      setInMeditation = _useContext.setInMeditation,\n      time = _useContext.time,\n      setTime = _useContext.setTime,\n      inSession = _useContext.inSession,\n      setInSession = _useContext.setInSession,\n      sessionFinished = _useContext.sessionFinished,\n      setSessionFinished = _useContext.setSessionFinished;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      sound = _useState2[0],\n      setSound = _useState2[1];\n\n  useEffect(function () {\n    var _Audio$Sound$createAs = Audio.Sound.createAsync(require(\"../../assets/sounds/ambiance/rain.mp3\")),\n        sound = _Audio$Sound$createAs.sound;\n\n    setSound(sound);\n  }, []);\n\n  function toggleSound(status) {\n    return _regeneratorRuntime.async(function toggleSound$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log('Loading Sound');\n\n            if (!status) {\n              _context.next = 7;\n              break;\n            }\n\n            console.log('Playing Sound');\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(sound.playAsync());\n\n          case 5:\n            _context.next = 10;\n            break;\n\n          case 7:\n            console.log('Stopping Sound');\n            _context.next = 10;\n            return _regeneratorRuntime.awrap(sound.stopAsync());\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  useEffect(function () {\n    return sound ? function () {\n      console.log('Unloading Sound');\n      sound.unloadAsync();\n    } : undefined;\n  }, [sound]);\n\n  var sessionAction = function sessionAction() {\n    inMeditation ? toggleSound(false) : toggleSound(true);\n\n    if (sessionFinished) {\n      setInMeditation(false);\n      setInSession(false);\n      setSessionFinished(false);\n      resetTimer();\n      toggleSound(false);\n    } else if (!inSession) {\n      setInSession(true);\n      console.log(inMeditation);\n      setInMeditation(!inMeditation);\n    } else {\n      setInMeditation(!inMeditation);\n    }\n  };\n\n  var finishSession = function finishSession() {\n    setInMeditation(false);\n    setInSession(false);\n    setSessionFinished(false);\n    resetTimer();\n  };\n\n  return React.createElement(View, {\n    style: style(inMeditation).container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, React.createElement(TouchableOpacity, {\n    style: style(inMeditation).button,\n    onPress: sessionAction,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: style(inMeditation).actionText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, !inSession ? 'START' : inMeditation ? 'PAUSE' : sessionFinished ? 'FINISH' : 'RESUME')), React.createElement(Text, {\n    style: style(inMeditation).finishText,\n    onPress: finishSession,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, inSession && !inMeditation && !sessionFinished ? 'Finish' : null));\n}\n;\n\nvar style = function style(inMeditation) {\n  return StyleSheet.create({\n    container: {\n      flex: 1,\n      marginTop: '10%'\n    },\n    button: {\n      justifyContent: 'center',\n      alignItems: 'center',\n      width: '100%',\n      height: 75,\n      borderWidth: 10,\n      borderRadius: 100,\n      borderColor: inMeditation ? '#ECE4DB' : '#ecdcdb'\n    },\n    actionText: {\n      margin: 10,\n      fontSize: 30,\n      fontWeight: '600',\n      color: '#787878'\n    },\n    finishText: {\n      fontSize: 18,\n      color: '#787878',\n      width: '100%',\n      marginRight: 'auto',\n      marginLeft: 'auto',\n      marginTop: '10%',\n      textDecorationLine: 'underline'\n    }\n  });\n};","map":{"version":3,"sources":["/Users/akhil/SoftwareApps/Meditate/client/SessionComponents/ActionButton.jsx"],"names":["React","useState","useContext","useEffect","SessionContext","Audio","ActionButton","resetTimer","inMeditation","setInMeditation","time","setTime","inSession","setInSession","sessionFinished","setSessionFinished","sound","setSound","Sound","createAsync","require","toggleSound","status","console","log","playAsync","stopAsync","unloadAsync","undefined","sessionAction","finishSession","style","container","button","actionText","finishText","StyleSheet","create","flex","marginTop","justifyContent","alignItems","width","height","borderWidth","borderRadius","borderColor","margin","fontSize","fontWeight","color","marginRight","marginLeft","textDecorationLine"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport SessionContext from '../Contexts.jsx';\nimport { Audio } from 'expo-av';\n\nexport default function ActionButton({ resetTimer }) {\n  const {\n    inMeditation, setInMeditation,\n    time, setTime,\n    inSession, setInSession,\n    sessionFinished, setSessionFinished\n  } = useContext(SessionContext);\n\n  const [sound, setSound] = useState();\n\n  useEffect(() => {\n    const { sound } = Audio.Sound.createAsync(\n      require('../../assets/sounds/ambiance/rain.mp3')\n    );\n    setSound(sound);\n  }, [])\n\n  async function toggleSound(status) {\n    console.log('Loading Sound');\n\n    if (status) {\n      console.log('Playing Sound');\n      await sound.playAsync();\n    } else {\n      console.log('Stopping Sound');\n      await sound.stopAsync();\n    }\n  }\n\n  useEffect(() => {\n    return sound\n      ? () => {\n        console.log('Unloading Sound');\n        sound.unloadAsync();\n      }\n      : undefined;\n  }, [sound])\n\n  const sessionAction = () => {\n    // handle sound first\n    inMeditation ? toggleSound(false) : toggleSound(true);\n\n    // reset all session state when session is over\n    if (sessionFinished) {\n      setInMeditation(false);\n      setInSession(false);\n      setSessionFinished(false);\n      resetTimer();\n      toggleSound(false);\n\n    // start a session if there is no session\n    } else if (!inSession) {\n      setInSession(true);\n      console.log(inMeditation);\n      setInMeditation(!inMeditation);\n\n    // resume and pause current session\n    } else {\n      setInMeditation(!inMeditation);\n    }\n  };\n\n  const finishSession = () => {\n    setInMeditation(false);\n    setInSession(false);\n    setSessionFinished(false);\n    resetTimer();\n  }\n\n  return (\n    <View style={style(inMeditation).container}>\n      <TouchableOpacity style={style(inMeditation).button} onPress={sessionAction}>\n        <Text style={style(inMeditation).actionText}>\n          {!inSession ? 'START' : inMeditation ? 'PAUSE' : sessionFinished ? 'FINISH' : 'RESUME'}\n        </Text>\n      </TouchableOpacity>\n      <Text\n        style={style(inMeditation).finishText}\n        onPress={finishSession}\n      >\n          {inSession && !inMeditation && !sessionFinished ?\n            'Finish' : null\n          }\n        </Text>\n    </View>\n  )\n};\n\nconst style = (inMeditation) => StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: '10%',\n  },\n  button: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    height: 75,\n    borderWidth: 10,\n    borderRadius: 100,\n    borderColor: inMeditation ? '#ECE4DB' : '#ecdcdb',\n  },\n  actionText: {\n    margin: 10,\n    fontSize: 30,\n    fontWeight: '600',\n    color: '#787878',\n  },\n  finishText: {\n    fontSize: 18,\n    color: '#787878',\n    width: '100%',\n    marginRight: 'auto',\n    marginLeft: 'auto',\n    marginTop: '10%',\n    textDecorationLine: 'underline'\n  }\n});\n\n"]},"metadata":{},"sourceType":"module"}